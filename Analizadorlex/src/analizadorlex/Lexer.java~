/* The following code was generated by JFlex 1.4.3 on 18/04/17 0:20 */

package analizadorlex;

import javax.swing.*;
import java.util.*;
import static analizadorlex.Token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 18/04/17 0:20 from the specification file
 * <tt>C:/Users/Alondra/Documents/NetBeansProjects/Analizadorlex/src/analizadorlex/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\4\1\0\1\5\1\3\16\0\4\0\1\5\1\71"+
    "\2\0\1\0\3\0\1\46\1\50\1\7\1\12\1\63\1\47\1\10"+
    "\1\6\12\2\1\64\1\45\1\70\1\65\1\67\2\0\1\22\1\1"+
    "\1\15\1\26\1\24\1\17\2\1\1\13\2\1\1\23\1\27\1\14"+
    "\1\16\1\20\1\1\1\21\1\36\1\25\6\1\1\61\1\0\1\62"+
    "\1\0\1\55\1\0\1\53\1\32\1\35\1\66\1\11\1\51\1\42"+
    "\1\56\1\34\2\1\1\33\1\44\1\41\1\52\1\30\1\1\1\40"+
    "\1\54\1\37\1\31\2\1\1\43\1\72\1\1\1\57\1\0\1\60"+
    "\1\0\41\0\2\0\4\0\4\0\1\0\2\0\1\0\7\0\1\0"+
    "\4\0\1\0\5\0\27\0\1\0\37\0\1\0\u01ca\0\4\0\14\0"+
    "\16\0\5\0\7\0\1\0\1\0\1\0\21\0\160\0\5\0\1\0"+
    "\2\0\2\0\4\0\10\0\1\0\1\0\3\0\1\0\1\0\1\0"+
    "\24\0\1\0\123\0\1\0\213\0\1\0\5\0\2\0\236\0\11\0"+
    "\46\0\2\0\1\0\7\0\47\0\7\0\1\0\1\0\55\0\1\0"+
    "\1\0\1\0\2\0\1\0\2\0\1\0\1\0\10\0\33\0\5\0"+
    "\3\0\15\0\5\0\6\0\1\0\4\0\13\0\5\0\53\0\37\0"+
    "\4\0\2\0\1\0\143\0\1\0\1\0\10\0\1\0\6\0\2\0"+
    "\2\0\1\0\4\0\2\0\12\0\3\0\2\0\1\0\17\0\1\0"+
    "\1\0\1\0\36\0\33\0\2\0\131\0\13\0\1\0\16\0\12\0"+
    "\41\0\11\0\2\0\4\0\1\0\5\0\26\0\4\0\1\0\11\0"+
    "\1\0\3\0\1\0\5\0\22\0\31\0\3\0\104\0\1\0\1\0"+
    "\13\0\67\0\33\0\1\0\4\0\66\0\3\0\1\0\22\0\1\0"+
    "\7\0\12\0\2\0\2\0\12\0\1\0\7\0\1\0\7\0\1\0"+
    "\3\0\1\0\10\0\2\0\2\0\2\0\26\0\1\0\7\0\1\0"+
    "\1\0\3\0\4\0\2\0\1\0\1\0\7\0\2\0\2\0\2\0"+
    "\3\0\1\0\10\0\1\0\4\0\2\0\1\0\3\0\2\0\2\0"+
    "\12\0\4\0\7\0\1\0\5\0\3\0\1\0\6\0\4\0\2\0"+
    "\2\0\26\0\1\0\7\0\1\0\2\0\1\0\2\0\1\0\2\0"+
    "\2\0\1\0\1\0\5\0\4\0\2\0\2\0\3\0\3\0\1\0"+
    "\7\0\4\0\1\0\1\0\7\0\14\0\3\0\1\0\13\0\3\0"+
    "\1\0\11\0\1\0\3\0\1\0\26\0\1\0\7\0\1\0\2\0"+
    "\1\0\5\0\2\0\1\0\1\0\10\0\1\0\3\0\1\0\3\0"+
    "\2\0\1\0\17\0\2\0\2\0\2\0\12\0\1\0\1\0\17\0"+
    "\3\0\1\0\10\0\2\0\2\0\2\0\26\0\1\0\7\0\1\0"+
    "\2\0\1\0\5\0\2\0\1\0\1\0\7\0\2\0\2\0\2\0"+
    "\3\0\10\0\2\0\4\0\2\0\1\0\3\0\2\0\2\0\12\0"+
    "\1\0\1\0\20\0\1\0\1\0\1\0\6\0\3\0\3\0\1\0"+
    "\4\0\3\0\2\0\1\0\1\0\1\0\2\0\3\0\2\0\3\0"+
    "\3\0\3\0\14\0\4\0\5\0\3\0\3\0\1\0\4\0\2\0"+
    "\1\0\6\0\1\0\16\0\12\0\11\0\1\0\7\0\3\0\1\0"+
    "\10\0\1\0\3\0\1\0\27\0\1\0\12\0\1\0\5\0\3\0"+
    "\1\0\7\0\1\0\3\0\1\0\4\0\7\0\2\0\1\0\2\0"+
    "\6\0\2\0\2\0\2\0\12\0\22\0\2\0\1\0\10\0\1\0"+
    "\3\0\1\0\27\0\1\0\12\0\1\0\5\0\2\0\1\0\1\0"+
    "\7\0\1\0\3\0\1\0\4\0\7\0\2\0\7\0\1\0\1\0"+
    "\2\0\2\0\2\0\12\0\1\0\2\0\17\0\2\0\1\0\10\0"+
    "\1\0\3\0\1\0\51\0\2\0\1\0\7\0\1\0\3\0\1\0"+
    "\4\0\1\0\10\0\1\0\10\0\2\0\2\0\2\0\12\0\12\0"+
    "\6\0\2\0\2\0\1\0\22\0\3\0\30\0\1\0\11\0\1\0"+
    "\1\0\2\0\7\0\3\0\1\0\4\0\6\0\1\0\1\0\1\0"+
    "\10\0\22\0\2\0\15\0\60\0\1\0\2\0\7\0\4\0\10\0"+
    "\10\0\1\0\12\0\47\0\2\0\1\0\1\0\2\0\2\0\1\0"+
    "\1\0\2\0\1\0\6\0\4\0\1\0\7\0\1\0\3\0\1\0"+
    "\1\0\1\0\1\0\2\0\2\0\1\0\4\0\1\0\2\0\6\0"+
    "\1\0\2\0\1\0\2\0\5\0\1\0\1\0\1\0\6\0\2\0"+
    "\12\0\2\0\4\0\40\0\1\0\27\0\2\0\6\0\12\0\13\0"+
    "\1\0\1\0\1\0\1\0\1\0\4\0\2\0\10\0\1\0\44\0"+
    "\4\0\24\0\1\0\2\0\5\0\13\0\1\0\44\0\11\0\1\0"+
    "\71\0\53\0\24\0\1\0\12\0\6\0\6\0\4\0\4\0\3\0"+
    "\1\0\3\0\2\0\7\0\3\0\4\0\15\0\14\0\1\0\17\0"+
    "\2\0\46\0\1\0\1\0\5\0\1\0\2\0\53\0\1\0\u014d\0"+
    "\1\0\4\0\2\0\7\0\1\0\1\0\1\0\4\0\2\0\51\0"+
    "\1\0\4\0\2\0\41\0\1\0\4\0\2\0\7\0\1\0\1\0"+
    "\1\0\4\0\2\0\17\0\1\0\71\0\1\0\4\0\2\0\103\0"+
    "\2\0\3\0\40\0\20\0\20\0\125\0\14\0\u026c\0\2\0\21\0"+
    "\1\0\32\0\5\0\113\0\3\0\3\0\17\0\15\0\1\0\4\0"+
    "\3\0\13\0\22\0\3\0\13\0\22\0\2\0\14\0\15\0\1\0"+
    "\3\0\1\0\2\0\14\0\64\0\40\0\3\0\1\0\3\0\2\0"+
    "\1\0\2\0\12\0\41\0\3\0\2\0\12\0\6\0\130\0\10\0"+
    "\51\0\1\0\1\0\5\0\106\0\12\0\35\0\3\0\14\0\4\0"+
    "\14\0\12\0\12\0\36\0\2\0\5\0\13\0\54\0\4\0\21\0"+
    "\7\0\2\0\6\0\12\0\46\0\27\0\5\0\4\0\65\0\12\0"+
    "\1\0\35\0\2\0\13\0\6\0\12\0\15\0\1\0\130\0\5\0"+
    "\57\0\21\0\7\0\4\0\12\0\21\0\11\0\14\0\3\0\36\0"+
    "\15\0\2\0\12\0\54\0\16\0\14\0\44\0\24\0\10\0\12\0"+
    "\3\0\3\0\12\0\44\0\122\0\3\0\1\0\25\0\4\0\1\0"+
    "\4\0\3\0\2\0\11\0\300\0\47\0\25\0\4\0\u0116\0\2\0"+
    "\6\0\2\0\46\0\2\0\6\0\2\0\10\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\37\0\2\0\65\0\1\0\7\0\1\0"+
    "\1\0\3\0\3\0\1\0\7\0\3\0\4\0\2\0\6\0\4\0"+
    "\15\0\5\0\3\0\1\0\7\0\16\0\5\0\32\0\5\0\20\0"+
    "\2\0\23\0\1\0\13\0\5\0\5\0\6\0\1\0\1\0\15\0"+
    "\1\0\20\0\15\0\3\0\33\0\25\0\15\0\4\0\1\0\3\0"+
    "\14\0\21\0\1\0\4\0\1\0\2\0\12\0\1\0\1\0\3\0"+
    "\5\0\6\0\1\0\1\0\1\0\1\0\1\0\1\0\4\0\1\0"+
    "\13\0\2\0\4\0\5\0\5\0\4\0\1\0\21\0\51\0\u0a77\0"+
    "\57\0\1\0\57\0\1\0\205\0\6\0\4\0\3\0\2\0\14\0"+
    "\46\0\1\0\1\0\5\0\1\0\2\0\70\0\7\0\1\0\17\0"+
    "\1\0\27\0\11\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0"+
    "\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0\40\0"+
    "\57\0\1\0\u01d5\0\3\0\31\0\11\0\6\0\1\0\5\0\2\0"+
    "\5\0\4\0\126\0\2\0\2\0\2\0\3\0\1\0\132\0\1\0"+
    "\4\0\5\0\51\0\3\0\136\0\21\0\33\0\65\0\20\0\u0200\0"+
    "\u19b6\0\112\0\u51cd\0\63\0\u048d\0\103\0\56\0\2\0\u010d\0\3\0"+
    "\20\0\12\0\2\0\24\0\57\0\1\0\4\0\12\0\1\0\31\0"+
    "\7\0\1\0\120\0\2\0\45\0\11\0\2\0\147\0\2\0\4\0"+
    "\1\0\4\0\14\0\13\0\115\0\12\0\1\0\3\0\1\0\4\0"+
    "\1\0\27\0\5\0\20\0\1\0\7\0\64\0\14\0\2\0\62\0"+
    "\21\0\13\0\12\0\6\0\22\0\6\0\3\0\1\0\4\0\12\0"+
    "\34\0\10\0\2\0\27\0\15\0\14\0\35\0\3\0\4\0\57\0"+
    "\16\0\16\0\1\0\12\0\46\0\51\0\16\0\11\0\3\0\1\0"+
    "\10\0\2\0\2\0\12\0\6\0\27\0\3\0\1\0\1\0\4\0"+
    "\60\0\1\0\1\0\3\0\2\0\2\0\5\0\2\0\1\0\1\0"+
    "\1\0\30\0\3\0\2\0\13\0\5\0\2\0\3\0\2\0\12\0"+
    "\6\0\2\0\6\0\2\0\6\0\11\0\7\0\1\0\7\0\221\0"+
    "\43\0\10\0\1\0\2\0\2\0\12\0\6\0\u2ba4\0\14\0\27\0"+
    "\4\0\61\0\u2104\0\u016e\0\2\0\152\0\46\0\7\0\14\0\5\0"+
    "\5\0\1\0\1\0\12\0\1\0\15\0\1\0\5\0\1\0\1\0"+
    "\1\0\2\0\1\0\2\0\1\0\154\0\41\0\u016b\0\22\0\100\0"+
    "\2\0\66\0\50\0\15\0\3\0\20\0\20\0\7\0\14\0\2\0"+
    "\30\0\3\0\31\0\1\0\6\0\5\0\1\0\207\0\2\0\1\0"+
    "\4\0\1\0\13\0\12\0\7\0\32\0\4\0\1\0\1\0\32\0"+
    "\13\0\131\0\3\0\6\0\2\0\6\0\2\0\6\0\2\0\3\0"+
    "\3\0\2\0\3\0\2\0\22\0\3\0\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\10\11\1\1\11\1\12\1\13\1\14\3\1"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\4\1\0\1\27\1\30\4\0\1\31"+
    "\1\32\14\0\1\33\1\34\2\0\1\35\1\0\1\36"+
    "\1\37\1\40\1\41\3\0\1\42\1\43\4\0\1\44"+
    "\27\0\1\45\1\46\1\47\2\0\1\2\2\0\1\50"+
    "\2\0\1\51\11\0\1\52\1\53\1\54\1\55\1\56"+
    "\2\0\1\57\7\0\1\60\1\61\1\0\1\62\1\0"+
    "\1\63\1\0\1\64\2\0\1\65\1\66\13\0\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\73\0\73\0\354\0\u0127"+
    "\0\u0162\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\73\0\u0426\0\u0461\0\73"+
    "\0\u049c\0\u04d7\0\u0512\0\73\0\73\0\73\0\73\0\73"+
    "\0\73\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\73"+
    "\0\73\0\u06af\0\u06ea\0\u0725\0\u0760\0\73\0\73\0\u079b"+
    "\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973"+
    "\0\u09ae\0\u09e9\0\u0a24\0\73\0\73\0\u0a5f\0\u0a9a\0\u0ad5"+
    "\0\u0b10\0\73\0\73\0\73\0\73\0\u0b4b\0\u0b86\0\u0bc1"+
    "\0\73\0\73\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\73\0\u0ce8"+
    "\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0"+
    "\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098"+
    "\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\73\0\73"+
    "\0\73\0\u1235\0\u1270\0\73\0\u12ab\0\u12e6\0\73\0\u1321"+
    "\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9"+
    "\0\u1534\0\u156f\0\u15aa\0\73\0\73\0\73\0\73\0\73"+
    "\0\u15e5\0\u1620\0\73\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747"+
    "\0\u1782\0\u17bd\0\73\0\73\0\u17f8\0\73\0\u1833\0\73"+
    "\0\u186e\0\73\0\u18a9\0\u18e4\0\73\0\73\0\u191f\0\u195a"+
    "\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32"+
    "\0\u1b6d\0\u1ba8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\3\2\1\15\1\16\3\2\1\17"+
    "\3\2\1\20\1\2\1\21\4\2\1\22\1\23\3\2"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\2\2\1\32"+
    "\1\2\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\2\1\43\1\44\1\45\1\2\75\0\1\3"+
    "\74\0\1\5\74\0\1\46\1\47\55\0\1\50\72\0"+
    "\1\51\51\0\1\52\5\0\1\53\17\0\1\54\41\0"+
    "\1\55\43\0\1\56\52\0\1\57\21\0\1\60\12\0"+
    "\1\61\56\0\1\62\100\0\1\63\65\0\1\64\107\0"+
    "\1\65\21\0\1\66\71\0\1\67\60\0\1\70\43\0"+
    "\1\71\115\0\1\72\105\0\1\73\72\0\1\74\15\0"+
    "\1\75\40\0\1\76\17\0\1\77\53\0\1\100\111\0"+
    "\1\101\104\0\1\102\72\0\1\103\72\0\1\104\72\0"+
    "\1\105\5\0\3\46\2\0\66\46\7\106\1\107\63\106"+
    "\52\0\1\110\30\0\1\111\72\0\1\112\121\0\1\113"+
    "\15\0\1\114\30\0\1\115\77\0\1\116\66\0\1\117"+
    "\71\0\1\120\104\0\1\121\77\0\1\122\100\0\1\123"+
    "\104\0\1\124\51\0\1\125\71\0\1\126\53\0\1\127"+
    "\63\0\1\130\142\0\1\131\53\0\1\132\100\0\1\133"+
    "\66\0\1\134\16\0\1\135\16\0\7\106\1\136\63\106"+
    "\6\0\1\6\1\107\151\0\1\137\56\0\1\140\55\0"+
    "\1\141\52\0\1\142\76\0\1\143\65\0\1\144\77\0"+
    "\1\145\104\0\1\146\112\0\1\147\52\0\1\150\50\0"+
    "\1\151\72\0\1\152\122\0\1\153\33\0\1\130\45\0"+
    "\1\154\75\0\1\155\73\0\1\156\70\0\1\157\31\0"+
    "\1\160\120\0\1\161\33\0\6\106\1\6\1\136\63\106"+
    "\10\0\1\162\123\0\1\163\104\0\1\164\32\0\1\165"+
    "\72\0\1\166\74\0\1\167\77\0\1\170\104\0\1\171"+
    "\75\0\1\172\72\0\1\173\72\0\1\174\44\0\1\175"+
    "\121\0\1\176\105\0\1\177\104\0\1\200\42\0\1\201"+
    "\111\0\1\202\34\0\1\203\103\0\1\204\56\0\1\205"+
    "\105\0\1\206\101\0\1\207\71\0\1\210\76\0\1\211"+
    "\43\0\1\212\133\0\1\213\44\0\1\214\66\0\1\215"+
    "\74\0\1\216\106\0\1\217\74\0\1\220\105\0\1\221"+
    "\73\0\1\222\40\0\1\223\107\0\1\224\107\0\1\225"+
    "\41\0\1\226\107\0\1\227\66\0\1\230\77\0\1\231"+
    "\73\0\1\232\63\0\1\233\50\0\1\234\124\0\1\235"+
    "\40\0\1\236\125\0\1\237\37\0\1\240\126\0\1\241"+
    "\26\0\1\242\7\0\1\242\1\0\32\242\4\0\6\242"+
    "\7\0\1\242\3\0\1\242\1\0\2\242\6\0\1\242"+
    "\1\0\32\242\4\0\6\242\7\0\1\242\3\0\1\242";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7139];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\16\1\1\11\2\1\1\11"+
    "\3\1\6\11\5\1\1\0\2\11\4\0\2\11\14\0"+
    "\2\11\2\0\1\1\1\0\4\11\3\0\2\11\4\0"+
    "\1\11\27\0\3\11\2\0\1\11\2\0\1\11\2\0"+
    "\1\1\11\0\5\11\2\0\1\11\7\0\2\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\2\11\13\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2274) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { return MAS;
          }
        case 56: break;
        case 44: 
          { return HACER;
          }
        case 57: break;
        case 13: 
          { return LLAVEI;
          }
        case 58: break;
        case 33: 
          { return NOI;
          }
        case 59: break;
        case 2: 
          { lexeme=yytext(); return ENTERO;
          }
        case 60: break;
        case 23: 
          { return DIVI;
          }
        case 61: break;
        case 10: 
          { return PARENT;
          }
        case 62: break;
        case 11: 
          { return MEN;
          }
        case 63: break;
        case 46: 
          { return MODI;
          }
        case 64: break;
        case 3: 
          { return FINLINEA;
          }
        case 65: break;
        case 29: 
          { return SI ;
          }
        case 66: break;
        case 4: 
          { /* No se procesa */
          }
        case 67: break;
        case 41: 
          { return MOD;
          }
        case 68: break;
        case 15: 
          { return CORI;
          }
        case 69: break;
        case 48: 
          { return ENCASO;
          }
        case 70: break;
        case 43: 
          { return FALSE;
          }
        case 71: break;
        case 21: 
          { return MENQ;
          }
        case 72: break;
        case 12: 
          { return PAREND;
          }
        case 73: break;
        case 30: 
          { return IGUALIGUAL;
          }
        case 74: break;
        case 54: 
          { return PRINCIPIO;
          }
        case 75: break;
        case 20: 
          { return MAYQ;
          }
        case 76: break;
        case 45: 
          { return HASTA;
          }
        case 77: break;
        case 5: 
          { return DIV;
          }
        case 78: break;
        case 53: 
          { return MIENTRAS;
          }
        case 79: break;
        case 7: 
          { return PUNTO;
          }
        case 80: break;
        case 31: 
          { return MAYORI;
          }
        case 81: break;
        case 50: 
          { return ENTRADA;
          }
        case 82: break;
        case 17: 
          { return COMA;
          }
        case 83: break;
        case 22: 
          { return NO;
          }
        case 84: break;
        case 32: 
          { return MENORI;
          }
        case 85: break;
        case 27: 
          { return MENMEN;
          }
        case 86: break;
        case 37: 
          { return PARA;
          }
        case 87: break;
        case 9: 
          { return PUNTOCOMA;
          }
        case 88: break;
        case 16: 
          { return CORE;
          }
        case 89: break;
        case 14: 
          { return LLAVEND;
          }
        case 90: break;
        case 51: 
          { return REPETIR;
          }
        case 91: break;
        case 49: 
          { return IMPRIME;
          }
        case 92: break;
        case 47: 
          { return INICIO;
          }
        case 93: break;
        case 42: 
          { return FLOTANTE;
          }
        case 94: break;
        case 26: 
          { return MASI;
          }
        case 95: break;
        case 19: 
          { return IGUAL;
          }
        case 96: break;
        case 24: 
          { return MULI;
          }
        case 97: break;
        case 35: 
          { return Y;
          }
        case 98: break;
        case 1: 
          { return ERROR;
          }
        case 99: break;
        case 39: 
          { return TRUE;
          }
        case 100: break;
        case 36: 
          { return FIN;
          }
        case 101: break;
        case 55: 
          { lexeme=yytext(); return TEXTO;
          }
        case 102: break;
        case 28: 
          { return MENI;
          }
        case 103: break;
        case 38: 
          { return BOOL;
          }
        case 104: break;
        case 18: 
          { return DOSPUNTOS;
          }
        case 105: break;
        case 40: 
          { return SINO;
          }
        case 106: break;
        case 52: 
          { return ENTONCES;
          }
        case 107: break;
        case 6: 
          { return MUL;
          }
        case 108: break;
        case 25: 
          { return MASMAS;
          }
        case 109: break;
        case 34: 
          { return O;
          }
        case 110: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
