/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Interfaz.java
 *
 * Created on 16/11/2011, 07:44:27 AM
 */

package analizadorlex;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Carlos
 */
public class Interfaz extends javax.swing.JFrame {

    /** Creates new form Interfaz */
    List<Identificador> tokenslist;
    public Interfaz() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Analizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Sentencia");

        jLabel2.setText("Resultado");

        jButton2.setText("Limpiar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(259, 259, 259)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(jButton1)
                        .addGap(232, 232, 232)
                        .addComponent(jButton2)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
             probarLexerFile();
        }
        catch (IOException ex){
            System.out.println(ex.getMessage());
        }
//        tablaResultado();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jTextArea1.setText("");
        jTextArea2.setText("");
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }
    public void probarLexerFile() throws IOException{
        int contIDs=0;
        tokenslist = new LinkedList<Identificador>();
        File fichero = new File ("fichero.txt");
        PrintWriter writer;
        try {
            writer = new PrintWriter(fichero);
            writer.print(jTextArea1.getText());
            writer.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
        Reader reader = new BufferedReader(new FileReader("fichero.txt"));
        Lexer lexer = new Lexer (reader);
        String resultado="";
        while (true){
            Token token =lexer.yylex();
            if (token == null){
                for(int i=0;i<tokenslist.size();i++){
                    System.out.println(tokenslist.get(i).nombre + "=" + tokenslist.get(i).ID);
                }
                jTextArea2.setText(resultado);
                return;
            }
            switch (token){
                case MAS:
                    resultado=resultado+ "<+>";
                    break;
                case MEN:
                    resultado=resultado+ "<->";
                    break;
                case MUL:
                    resultado=resultado+ "<*>";
                    break;
                case DIV:
                    resultado=resultado+ "</>";
                    break;
                case IGUAL:
                    resultado=resultado+ "<=>";
                    break;
                case PAREND:
                    resultado=resultado+"<)>";
                    break;
                case PARENT:
                    resultado=resultado+"<(>";
                    break;
                case LLAVEI:
                    resultado=resultado+"<{>";
                    break;
                case LLAVEND:
                    resultado=resultado+"<}>";
                    break;
                case CORI:
                    resultado=resultado+"<[>";
                    break;
                case CORE:
                    resultado=resultado+"<]>";
                    break;
                case COMA:
                    resultado=resultado+"<,>";
                    break;
                case DOSPUNTOS:
                    resultado=resultado+"<:>";
                    break;
                case PUNTOCOMA:
                    resultado=resultado+"<;>";
                    break;
                case MASMAS:
                    resultado=resultado+"<++>";
                    break;
                case MENMEN:
                    resultado=resultado+"<-->";
                    break;
                case MOD:
                    resultado=resultado+"<mod>";
                    break;
                case MASI:
                    resultado=resultado+"<+=>";
                    break;
                case MENI:
                    resultado=resultado+"<-=>";
                    break;
                case MODI:
                    resultado=resultado+"<mod=>";
                    break;
                case MULI:
                    resultado=resultado+"<*=>";
                    break;
                case DIVI:
                    resultado=resultado+"</=>";
                    break;
                case MAYQ:
                    resultado=resultado+"< > >";
                    break;
                case MENQ:
                    resultado=resultado+"< < >";
                    break;
                case IGUALIGUAL:
                    resultado=resultado+"<==>";
                    break;
                case NO:
                    resultado=resultado+"<!>";
                    break;
                case MAYORI:
                    resultado=resultado+"< >= >";
                    break;
                case MENORI:
                    resultado=resultado+"< <= >";
                    break;
                case NOI:
                    resultado=resultado+"<!=>";
                    break;
                case Y:
                    resultado=resultado+"<Y>";
                    break;
                case O:
                    resultado=resultado+"<O>";
                    break;
                case PUNTO:
                    resultado=resultado+"<.>";
                    break;
                case TRUE:
                    resultado=resultado+"<true>";
                    break;
                case FALSE:
                    resultado=resultado+"<false>";
                    break;
                case SINO:
                    resultado=resultado+"<ELSE>";
                    break;
                case MIENTRAS:
                    resultado=resultado+"<WHILE>";
                    break;
                case ENTONCES:
                    resultado=resultado+"<IF>";
                    break;
                case ENCASO:
                    resultado=resultado+"<SWITCH>";
                    break;
                case HACER:
                    resultado=resultado+"<DO>";
                    break;
                case REPETIR:
                    resultado=resultado+"<DO WHILE>";
                    break;
                case HASTA:
                    resultado=resultado+"<UNTIL>";
                    break;
                case PARA:
                    resultado=resultado+"<FOR>";
                    break;
                case IMPRIME:
                    resultado=resultado+"<PRINT>";
                    break;
                case REGRESAR:
                    resultado=resultado+"<RETORN>";
                    break;
               case TEXTO: {
                    resultado=resultado+ "<TEXTO: " + lexer.lexeme + "> ";
                    break;
                }
                case ENTERO:
                    resultado=resultado+ "< ENTERO:" + lexer.lexeme + "> ";
                    break;
                case ERROR:
                    resultado=resultado+ "Error al ingresar, este simbolo no reconocido ";
                    break;
               
                
                default:
                    resultado=resultado+ "<"+ lexer.lexeme + "> ";
            }
    }
 }
    /**
    public void tablaResultado(){
        Object[][] matriz = new Object [tokenslist.size()][2];
        for(int i =0; i<tokenslist.size();i++){
            matriz[i][0] = tokenslist.get(i).nombre;
            matriz[i][1] = tokenslist.get(i).ID;
        } 
        jTable1.setModel(new javax.swing.table.DefaultTableModel(matriz,
            new String [] {
                "Cadena", "ID"
        }
        ));
    }**/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables

}
